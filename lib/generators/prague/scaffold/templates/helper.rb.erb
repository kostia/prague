module <%= plural_name.camelize %>DisplayHelper
  #
  # Helper for linking to <%= plural_name %> with a fallback.
  # html_options are the same as for link_to helper.
  #
  #   link_to_display_<%= singular_name %> 'about'
  #   # => <a href="/about" title="About's link title">About's link title</a>
  #
  #   link_to_display_<%= singular_name %> 'about', title: 'Custom link title'
  #   # => <a href="/about" title="Custom link title">About's link title</a>
  #
  #   link_to_display_<%= singular_name %> 'about', title: 'Custom link title' do |<%= singular_name %>|
  #     "The original title was: #{<%= singular_name %>.link_title}"
  #   end
  #   # => <a href="/about" title="Custom link title">The original title was: About's link title</a>
  #
  # If the <%= singular_name %> doesn't exist then following will be generated:
  #
  #   link_to_display_<%= singular_name %> 'missing'
  #   # => <a href="#missing" title="Create me">missing</a>
  #
  # You can also change the "Create me!" message by providing i18n locales for 'prague.missing.<%= singular_name %>'
  # or 'prague.missing'.
  #
  # If the <%= singular_name %> doesn't exist and you want to display just nothing use the unless_missing option.
  #
  def link_to_display_<%= singular_name %>(permalink, html_options={})
    unless_missing = html_options.delete :unless_missing
    if <%= singular_name %> = <%= plural_name.classify %>.find_by_permalink(permalink)
      url = display_<%= singular_name %>_path permalink: <%= singular_name %>.permalink
      html_options = html_options.reverse_merge title: <%= singular_name %>.link_title
      if block_given?
        link_to url, html_options do
          yield <%= singular_name %>
        end
      else
        link_to <%= singular_name %>.link_title, url, html_options
      end
    elsif !unless_missing
      link_to permalink, "##{permalink}", title: t('prague.missing.<%= singular_name %>',
          default: t('prague.missing', default: 'Create me!'))
    end
  end
end
